<style>
  #cy {
    width: 100%;
    height: 500px;
  }
  .cyNode {
    width: 150px;
    height: 70px;
    padding: 5px;
    border-radius: 5px;
    border-style: solid;
    border-color: #333637;
  }
  .nodeValue {
    font-size: x-small;
  }

</style>
<div  class="cytoscape" id="cy">
</div>
<script type="application/javascript">

  const cy = cytoscape({
    container: document.getElementById('cy'),
    //layout: {
    //  name: 'cola',
    //  convergenceThreshold: 100, // end layout sooner, may be a bit lower quality
    //  animate: false
    //},
    layout: {
      name: 'elk',
      elk: {
        algorithm: 'stress',
        "stress.desiredEdgeLength": 200,
        "elk.spacing.nodeNode": 20,
        "elk.nodeSize.minimum": "(200,200)",
        "elk.nodeSize.constraints": ["MINIMUM_SIZE"],
        //componentLayoutAlgorithm: 'stress',
      },
    },
    elements: [
      // All nodes.
      <%= for %{project: project, ping: ping, last_ping: pong} <- @projects_and_pings do %>
        {
          data: {
            id: "<%= project.id %>",
            name: '<%= javascript_escape(link "#{status_icon(ping)} #{project.name}", to: Routes.project_path(@conn, :show, project)) %>',
            color: '<%= status_colour(ping) %>',
            text: '<%= render_status(ping, pong, false) %>',
            textColor: '<%= text_colour(ping) %>',
          },
        },
      <% end %>
      <%= for %Dependency{from_id: from, to_id: to} <- @dependencies do %>
        {
          data: {
            id: "<%= from %>-<%= to %>",
            source: "<%= from %>",
            target: "<%= to %>"
          },
        },
      <% end %>
    ],
    style: [
      {
        selector: 'node',
        style: {
          shape: 'round-rectangle',
          'background-color': 'white',
          height: 65,
          width: 145,
        }
      },
    ],
  });

  cy.nodeHtmlLabel([
    {
      query: 'node',
      // cssClass: "cyNode",
      valign: 'center',
      // halign: "left",
      valignBox: 'center',
      // halignBox: "left",
      tpl: (data) => {
        return `
          <div class="cyNode" style="background-color: ${data.color}; color: ${data.textColor}">
            <h2>${data.name}</h2>
            <p class="nodeValue">${data.text}</p>
          </div>
          `;
      },
    }],
    {
      enablePointerEvents: true,
    });
</script>
